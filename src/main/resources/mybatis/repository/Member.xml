<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-///mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="whitekim.mybatisblog.repository.MemberRepository">
    <resultMap id="Member" type="whitekim.mybatisblog.model.Member">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="nickname" property="nickname"/>
        <result column="at_created_time" property="atCreatedTime"/>
        <result column="at_updated_time" property="atUpdatedTime"/>
        <result column="is_deleted" property="isDeleted"/>
        <collection property="boardList" resultMap="Board" javaType="java.util.List" ofType="whitekim.mybatisblog.model.Board"/>
        <collection property="replyList" resultMap="Reply" javaType="java.util.List" ofType="whitekim.mybatisblog.model.Reply"/>
    </resultMap>
    <resultMap id="Board" type="whitekim.mybatisblog.model.Board" autoMapping="false">
        <id column="board_id" property="id"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="at_created_time" property="atCreatedTime"/>
        <result column="at_updated_time" property="atUpdatedTime"/>
        <result column="is_deleted" property="isDeleted"/>
    </resultMap>
    <resultMap id="Reply" type="whitekim.mybatisblog.model.Reply">
        <id column="reply_id" property="id"/>
        <result column="message" property="message"/>
        <result column="at_created_time" property="atCreatedTime"/>
        <result column="at_updated_time" property="atUpdatedTime"/>
        <result column="is_deleted" property="isDeleted"/>
    </resultMap>
    <select id="findAll" resultType="whitekim.mybatisblog.model.Member">
        select
            m.id,
            m.username,
            m.nickname,
            m.at_created_time,
            m.at_updated_time,
            b.id as "board_id",
            b.title,
            b.content,
            b.author,
            b.at_created_time,
            b.at_updated_time,
            b.is_deleted,
            r.id as "reply_id",
            r.board,
            r.message,
            r.at_created_time,
            r.at_updated_time
        from member m
            join board b on b.author = m.id
            join reply r on r.member = m.id
        where m.is_deleted = false
    </select>
    <select id="findById" parameterType="Long" resultMap="Member">
        select
            m.id,
            m.username,
            m.nickname,
            m.at_created_time,
            m.at_updated_time,
            b.id as "board_id",
            b.title,
            b.content,
            b.author,
            b.at_created_time,
            b.at_updated_time,
            b.is_deleted,
            r.id as "reply_id",
            r.board,
            r.message,
            r.at_created_time,
            r.at_updated_time
        from member m
                 join board b on b.author = m.id
                 join reply r on r.member = m.id
        where m.is_deleted = false and m.id = #{id}
    </select>
    <insert id="save" parameterType="whitekim.mybatisblog.model.Member">
        insert into member(username, password, nickname, at_created_time, at_updated_time)
        values (#{username}, #{password}, #{nickname}, now(), now())
    </insert>
    <update id="update" parameterType="whitekim.mybatisblog.model.Member">
        update member m
        set m.password = #{password}, m.nickname =#{nickname}, m.at_updated_time = now()
        where m.id = #{id}
    </update>
    <delete id="deleteById" parameterType="Long">
        delete
        from member m
        where m.id = #{id}
    </delete>
</mapper>